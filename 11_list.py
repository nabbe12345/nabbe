#파스칼표기법  <- 맨 앞글자만 대문자 ('J'ava의 class 생성시 활용)
#카멜표기법    <- 단어의 의미가 있는 첫글자를 대문자로 한다 (shop'L'ist)
#스네이크표기법 <- 단어간의 구분을 _ 로 한다 (shop'_'list) <- 파이썬에서 주로 사용




#리스트의 길이 Len(a) = ?
#a로 부터 2번째 칸을 불러올시 a[2]
#a로 부터 3번째칸에 추가할시 a.insert(3,"변수")


#용어 : 리스트 = 배열


#==============================================


#리스트 생성 방법 1 - 비어있는 리스트로 생성
a = []

#리스트 생성 방법 2 - 값이 있는 리스트로 생성
shop_list = ['apple', 'mango', 'carrot', 'banana']
print(f'shop_list : {shop_list}')    #print를 수시로 찍는 습관 '어디까지 나오는지'


#==========================================

#리스트에 값을 넣는 방법
#가장 뒤로부터 넣는 방법              #앞으로들어가는 언어(함수)가 있음 문제는 뒤로 밀리는것
a.append(1)
a.append(2)
a.append(3)

#특정한 번호를 지정해서 넣는 방법
a.insert(1, 'x')

# (1 <- 방번호(인덱스 순서), x <- 넣으려는 데이터)
#덮을꺼냐 밀꺼냐
# ex)덮으면3개 밀면 4개
#
print(f'a의 길이 : {len(a)}')    #리스트의 길이 Len(a) = ?
print(f'a : {a}')

#a의 2번방에 있는 값
print(f'a[2]={a[2]}')             # a의[몇번째 방] =a[3]

#a의 가장 마지막 방에 있는 값

print(f'a의 길이 : {len(a)}')
print(f'a의 가장 마지막에 있는 방은?? : {a[3]}')
#a = 1 X 3 4
#    0 1 X 3
#길이에서 1을 뺀 값을 이용 -> 인덱스는 0번부터 시작한다는 점을 이용


print(f'a의 가장 마지막에 있는 방은?? : {a[len(a) - 1]}')
#a의 전체 길이 (len) -> 4 , 숫자는 4이지만 컴터는 3으로 인식 그래서 -1 하는것
# 파이썬에서 사용되는 방식 , 0 보다 뒤로 가면 맨 뒤로 이동된다는 개념
print(f'a의 가장 마지막에 있는 방은?? : {a[-1]}') # <- 이건 파이썬에서만 가능


#==========================================

#리스트 정렬(sort)

shop_list.sort()   #오름차순 정렬
print(f'shop_list : {shop_list}')       # 알파벳 순서로 정렬

shop_list.sort(reverse=True)   #내림차순 정렬
print(f'shop_list : {shop_list}')

#  △ 오름차순 '작은 숫자가 '위로'  ▽ 내림차순은 '작은 숫자가 '아래로'


#sorted 는 원본의 리스트를 정렬한 값을 새로운 리스트로 반환
new_list = sorted(shop_list)
print(f'new_list : {new_list}')
#원본을 훼손 하지않고 보여주는  sorted 함수


# a 의 2번 인덱스에 c를 넣는다. insert랑 다른 개념
#         inesrt와 다른점은 해당 인덱스의 값을 지우고 그자리에 들어간다는 것
a[2] = 'c'
print(a)


# list 삭제
del a[1]
print(f'a : {a}')

#b = [ 1 ,2 ,3 ,4]
#b = [ 0 ,1 ,2 ,3] <- 인덱스